// Definition of the Meower service and its messages

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: meower/v1/meower.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MeowerSvc_Create_FullMethodName = "/meower.v1.MeowerSvc/Create"
	MeowerSvc_Index_FullMethodName  = "/meower.v1.MeowerSvc/Index"
)

// MeowerSvcClient is the client API for MeowerSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeowerSvcClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexResponse, error)
}

type meowerSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMeowerSvcClient(cc grpc.ClientConnInterface) MeowerSvcClient {
	return &meowerSvcClient{cc}
}

func (c *meowerSvcClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, MeowerSvc_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meowerSvcClient) Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndexResponse)
	err := c.cc.Invoke(ctx, MeowerSvc_Index_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeowerSvcServer is the server API for MeowerSvc service.
// All implementations must embed UnimplementedMeowerSvcServer
// for forward compatibility.
type MeowerSvcServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Index(context.Context, *IndexRequest) (*IndexResponse, error)
	mustEmbedUnimplementedMeowerSvcServer()
}

// UnimplementedMeowerSvcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeowerSvcServer struct{}

func (UnimplementedMeowerSvcServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMeowerSvcServer) Index(context.Context, *IndexRequest) (*IndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedMeowerSvcServer) mustEmbedUnimplementedMeowerSvcServer() {}
func (UnimplementedMeowerSvcServer) testEmbeddedByValue()                   {}

// UnsafeMeowerSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeowerSvcServer will
// result in compilation errors.
type UnsafeMeowerSvcServer interface {
	mustEmbedUnimplementedMeowerSvcServer()
}

func RegisterMeowerSvcServer(s grpc.ServiceRegistrar, srv MeowerSvcServer) {
	// If the following call pancis, it indicates UnimplementedMeowerSvcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeowerSvc_ServiceDesc, srv)
}

func _MeowerSvc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeowerSvcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeowerSvc_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeowerSvcServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeowerSvc_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeowerSvcServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeowerSvc_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeowerSvcServer).Index(ctx, req.(*IndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeowerSvc_ServiceDesc is the grpc.ServiceDesc for MeowerSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeowerSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meower.v1.MeowerSvc",
	HandlerType: (*MeowerSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MeowerSvc_Create_Handler,
		},
		{
			MethodName: "Index",
			Handler:    _MeowerSvc_Index_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meower/v1/meower.proto",
}
