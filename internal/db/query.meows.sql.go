// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.meows.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMeow = `-- name: CreateMeow :one
INSERT INTO meows (name)
VALUES ($1)
RETURNING id, name, created_at
`

func (q *Queries) CreateMeow(ctx context.Context, name string) (Meow, error) {
	row := q.db.QueryRow(ctx, createMeow, name)
	var i Meow
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getMeow = `-- name: GetMeow :one
SELECT id, name, created_at
FROM meows
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMeow(ctx context.Context, id pgtype.UUID) (Meow, error) {
	row := q.db.QueryRow(ctx, getMeow, id)
	var i Meow
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listMeows = `-- name: ListMeows :many
SELECT id, name, created_at
FROM meows
ORDER BY created_at DESC
`

func (q *Queries) ListMeows(ctx context.Context) ([]Meow, error) {
	rows, err := q.db.Query(ctx, listMeows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meow
	for rows.Next() {
		var i Meow
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
